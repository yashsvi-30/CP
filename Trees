𝐌𝐢𝐫𝐫𝐨𝐫 𝐓𝐫𝐞𝐞:
void mirrorTree(struct Node *root){
  if(root==NULL) return;
  mirrorTree(root->left);
  mirrorTree(root->right);
  struct Node* temp = root->left;
  root->left = root->right;
  root->right = temp;
}


𝐏𝐨𝐬𝐭𝐨𝐫𝐝𝐞𝐫 𝐓𝐫𝐚𝐯𝐞𝐫𝐬𝐚𝐥:
void postorder(struct Node* tree){
  if(root==NULL) return;
  postorder(root->left);
  postorder(root->right);
  cout<<root->data<<endl;
}

𝐏𝐫𝐞𝐨𝐫𝐝𝐞𝐫 𝐓𝐫𝐚𝐯𝐞𝐫𝐬𝐚𝐥:
void preorder(struct Node* root){
  if(root==NULL)return;
  preorder(root->left);
  cout<<root->data;
  preorder(root->right);
}

𝐂𝐡𝐞𝐜𝐤 𝐟𝐨𝐫 𝐁𝐒𝐓:
bool isBST(Node* node, int min,int max){
  if(node==NULL) return true;
  if(node->data < min || node->data > max) return false;
  return isBST(node->left,min,node->data-1) && isBST(node->right,node->data+1,max);
}
bool BST(Node* node){
int min = INT_MIN;
int max = INT_MAX;
 return isBST(node,min,max);
}

𝐓𝐨𝐩 𝐕𝐢𝐞𝐰 𝐨𝐟 𝐁𝐢𝐧𝐚𝐫𝐲 𝐓𝐫𝐞𝐞:

