𝐁𝐅𝐒:
vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        bool visited[V];
        for(int i=0;i<V;i++){
            visited[i]=false;
        }
        visited[V]=true;
        vector<int> ans;
        queue<int> q;
        q.push(V);
        while(!q.empty()){
            V= q.front();
            q.pop();
            ans.push_back(V);
            for(auto it=adj[V].begin();it!=adj[V].end();it++){
                if(!visited[*it]){
                    q.push(*it);
                    visited[*it]=true;
                }
            }
        }
        return ans;
 }
 
 𝐃𝐅𝐒:
 vector<int> dfs(int V,vector<int> adj[]){
        bool visited[V];
        vector<int> ans;
        stack<int> s;
        s.push(V);
        while(!s.empty()){
                V = s.top();
                s.pop();
                if(!visited[V]){
                        ans.push_back(V);
                        visited[V] = true;
                }
                for(auto it = adj[V].begin();it!=adj[V].end();it++){
                        if(!visited[*it]){
                                s.push(*it);
                        }
                }
        }
        return ans;
}

𝐃𝐞𝐭𝐞𝐜𝐭 𝐜𝐲𝐜𝐥𝐞 𝐢𝐧 𝐚𝐧 𝐮𝐧𝐝𝐢𝐫𝐞𝐜𝐭𝐞𝐝 𝐠𝐫𝐚𝐩𝐡:
bool dfs(int i,bool visited[] , vector<int> adj[], int prev ){
    visited[i]=1;
    for(auto it=adj[i].begin();it!=adj[i].end();it++){
         if(!visited[*it]){
            if(dfs(*it,visited,adj,i))
                return true;    
        }
        else if((*it!=prev)) return true;
    }
    return false;
}
bool isCyclic(vector<int> adj[],int v){
  bool  visited[v];
  memset(visited,0,sizeof(visited));
  for(int i=0;i<v;i++){
      if(!visited[i] && dfs(i,visited,adj,-1)) return 1;
  }
    return 0;
}


 

